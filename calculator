package calculator;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Test {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Ellipse Calculator");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(300, 400);
            frame.add(new EllipsePanel());
            frame.setVisible(true);
        });
    }
}

class EllipsePanel extends JPanel {
    private JTextField textField;
    private StringBuilder expression = new StringBuilder();

    public EllipsePanel() {
        setLayout(new BorderLayout());
        textField = new JTextField();
        add(textField, BorderLayout.NORTH);
        
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(4, 4));
        String[] buttons = {
            "7", "8", "9", "/",
            "4", "5", "6", "*",
            "1", "2", "3", "-",
            "C", "0", "=", "+"
        };

        for (String text : buttons) {
            JButton button = new JButton(text);
            buttonPanel.add(button);
            button.addActionListener(new ButtonClickListener());
        }

        add(buttonPanel, BorderLayout.CENTER);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setColor(Color.LIGHT_GRAY);
        g2d.fillOval(10, 10, getWidth() - 20, getHeight() - 20);
        setOpaque(false);
    }

    private class ButtonClickListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String command = e.getActionCommand();
            if (command.charAt(0) == 'C') {
                expression.setLength(0);
                textField.setText("");
            } else if (command.charAt(0) == '=') {
                try {
                    double result = evaluate(expression.toString());
                    textField.setText(String.valueOf(result));
                    expression.setLength(0);
                } catch (Exception ex) {
                    textField.setText("Error");
                }
            } else {
                expression.append(command);
                textField.setText(expression.toString());
            }
        }

        private double evaluate(String expr) {
            // A basic evaluation method (could be improved)
            String[] tokens = expr.split("(?<=[-+*/])|(?=[-+*/])");
            double result = Double.parseDouble(tokens[0]);
            for (int i = 1; i < tokens.length; i += 2) {
                String operator = tokens[i];
                double nextNumber = Double.parseDouble(tokens[i + 1]);
                switch (operator) {
                    case "+": result += nextNumber; break;
                    case "-": result -= nextNumber; break;
                    case "*": result *= nextNumber; break;
                    case "/": result /= nextNumber; break;
                }
            }
            return result;
        }
    }
}



